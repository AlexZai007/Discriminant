use std::io; // –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ—Ç–æ–∫–∞ –ø—Ä–∏–µ–º–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
use std::io::Write; //—á—Ç–æ –±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ flush –ø—Ä–∏–Ω—Ç–∞ –±–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫


fn main() {

    println!("\n –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç–∞ (v2.0) \n\n ‚ú≥Ô∏è  Github: https://github.com/alexzai007\n ‚ú≥Ô∏è  Telegram: https://t.me/Alexzai007best\n");

    //–∑–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
    loop {
        let mut a  = String::new();
        let mut b = String::new();
        let mut c = String::new();

        //–≤–≤–æ–¥–∏–º –∫—Ä–∞—Å–∏–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä 
        print!("üì• –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä a: ");
        io::stdout().flush().unwrap();
        io::stdin().read_line(&mut a)
        .expect("‚õî –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å—Ç—Ä–æ–∫—É");     
        let a: f64 = match a.trim().parse() {
            Ok(num) => num,
            Err(_) => {
                println!("‚õî –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω—ã—Ö, —Ü–∏–∫–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!\n");
                continue;
            },
        };

        //–≤–≤–æ–¥–∏–º –∫—Ä–∞—Å–∏–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä 
        print!("üì• –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä b: ");
        io::stdout().flush().unwrap();
        io::stdin().read_line(&mut b)
            .expect("‚õî –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å—Ç—Ä–æ–∫—É");
        let b: f64 = match b.trim().parse() {
            Ok(num) => num,
            Err(_) => {
                println!("‚õî –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω—ã—Ö, —Ü–∏–∫–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!\n");
                continue;
            },
        };

        //–≤–≤–æ–¥–∏–º –∫—Ä–∞—Å–∏–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä 
        print!("üì• –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä c: ");
        io::stdout().flush().unwrap();
        io::stdin().read_line(&mut c)
            .expect("‚õî –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å—Ç—Ä–æ–∫—É");
        let c: f64 = match c.trim().parse() {
            Ok(num) => num,
            Err(_) => {
                println!("‚õî –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω—ã—Ö, —Ü–∏–∫–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!\n");
                continue;
            },
        };

        //–Ω–∞—Ö–æ–¥–∏–º –¥–∏—Å–∫—Ä–µ–º–∏–Ω–∞–Ω—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω—É—é
        let discriminant: f64 = (b*b)-(4.0*(a*c));
        println!("\n‚òëÔ∏è –ù–∞–π–¥–µ–º –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç –ø–æ —Ñ–æ—Ä–º—É–ª–µ: \n\n ‚ñ´Ô∏è D = b^2 - 4 * a * c");
        println!(" ‚ñ´Ô∏è D = {}^2 - 4 * {} * {}", b, a, c);
        println!(" ‚ñ´Ô∏è D = {} - 4 * {}", b*b, a*c);
        println!(" ‚ñ´Ô∏è D = {} - {}", b*b, 4.0*a*c);
        println!(" ‚ñ´Ô∏è D = {}\n", discriminant);

        //–Ω–∞—Ö–æ–¥–∏–º –∏–∫—Å—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if discriminant > 0.0{
            println!("‚ÅâÔ∏è –î–∏—Å–∫—Ä–∏–º–µ–Ω–∞–Ω—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π! –ò–∑ —ç—Ç–æ–≥–æ —Å–ª—É–¥—É–µ—Ç —á—Ç–æ –∫–æ—Ä–Ω—è –¥–≤–∞!\n");
            println!("‚òëÔ∏è –ù–∞–π–¥–µ–º –∫–æ—Ä–Ω–∏ –ø–æ —Ñ–æ—Ä–º—É–ª–µ:\n\n ‚ñ´Ô∏è x = -b ¬± ‚àöD / 2 * a");
            let x1 = (-b + discriminant.sqrt()) / (2.0 * a);
            let x2 = (-b - discriminant.sqrt()) / (2.0 * a);
            println!(" üî∏ x1 = {}\n üî∏ x2 = {}\n", x1, x2);

        }else if discriminant == 0.0{
            println!("‚ÅâÔ∏è –î–∏—Å–∫—Ä–∏–º–µ–Ω–∞–Ω—Ç —Ä–∞–≤–µ–Ω –Ω—É–ª—é! –ò–∑ —ç—Ç–æ–≥–æ —Å–ª—É–¥—É–µ—Ç —á—Ç–æ –∫–æ—Ä–µ–Ω—å –æ–¥–∏–Ω!\n");
            println!("‚òëÔ∏è –ù–∞–π–¥–µ–º –∫–æ—Ä–Ω–∏ –ø–æ —Ñ–æ—Ä–º—É–ª–µ:\n\n ‚ñ´Ô∏è x = -b ¬± ‚àöD / 2 * a");
            let x1 = (-b + discriminant.sqrt()) / (2.0 * a);
            println!(" üî∏ x = {}\n", x1);
        
        }else{
            println!("‚ö†Ô∏è –î–∏—Å–∫—Ä–∏–º–µ–Ω–∞–Ω—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π! –ò–∑ —ç—Ç–æ–≥–æ —Å–ª—É–¥—É–µ—Ç —á—Ç–æ –∫–æ—Ä–Ω–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —á–∏—Å–ª–∞!\n")
        }



    }

}
